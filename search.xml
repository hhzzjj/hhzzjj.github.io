<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>搭建个人博客教程（一）</title>
      <link href="/2019/08/04/Blog-Building-Process-1/"/>
      <url>/2019/08/04/Blog-Building-Process-1/</url>
      
        <content type="html"><![CDATA[<p>花了两天的时间，本萌新的个人博客终于搭建好了，用 Hexo + GitHub 搭建个人博客真的超方便！</p><p>由于自己本身是学生，购买服务器并且定期维护，成本较高并且比较麻烦，所以选择到github上面托管个人博客。</p><a id="more"></a><p>博客的搭建过程参考了 <a href="https://zhuanlan.zhihu.com/p/44213627" target="_blank" rel="noopener">hexo超完整的搭建教程，让你拥有一个专属个人博客</a>，这一篇引导写的真的特别详细，强烈推荐！</p><p>我的这篇文章会在其基础之上，以自己亲自操作的流程为主，记录搭建个人博客的过程。</p><p><strong>注：</strong> 本文为在WIN10环境下进行的操作</p><h2 id="博客的基础搭建过程"><a href="#博客的基础搭建过程" class="headerlink" title="博客的基础搭建过程"></a>博客的基础搭建过程</h2><h3 id="1-安装-Git"><a href="#1-安装-Git" class="headerlink" title="1. 安装 Git"></a>1. 安装 Git</h3><p>我们需要通过git来管理和上传我们的博客文章到github，所以，首先我们需要到git官网上<a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载</a>,之后会有一个Git Bash的工具，打开Git Bash后，我们就可以得到命令行窗口（这个比WIN自带的好用太多了）</p><h3 id="2-安装-nodejs"><a href="#2-安装-nodejs" class="headerlink" title="2. 安装 nodejs"></a>2. 安装 nodejs</h3><p>因为Hexo是基于nodejs所编写，所以我们需要<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">下载安装</a>nodejs和npm工具（选择LTS版本即可）</p><p>安装完毕后，我们在Git Bash的命令行窗口输入命令</p><pre><code class="bash">$ node -v$ npm -v</code></pre><p>检查是否安装成功，安装成功会显示对应地版本号</p><h3 id="3-安装-hexo"><a href="#3-安装-hexo" class="headerlink" title="3. 安装 hexo"></a>3. 安装 hexo</h3><p>可以先创建一个单独的文件夹 blog，然后 <code>cd</code> 到该文件夹去，由于我创建的路径为 d:\blog，所以直接在命令行输入进入该文件夹的命令</p><pre><code class="bash">$ cd d:/blog</code></pre><p>然后输入命令安装 hexo</p><pre><code class="bash">$ npm install -g hexo-cli</code></pre><p>再用</p><pre><code class="bash">$ hexo -v</code></pre><p>查看版本，检查一下是否安装成功</p><p>然后再初始化一下 hexo（这个myblog自己取什么名字都行，以后的相对应的文件都会放在 myblog下，操作也会在该文件夹下进行）</p><pre><code class="bash">$ hexo init myblog</code></pre><p>接着</p><pre><code class="bash">$ cd  myblog //进入这个myblog文件夹$ npm install</code></pre><p>这样，指定文件夹目录下面就会多出：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><pre><code class="bash">$ hexo g$ hexo server</code></pre><p>这样我们就打开了hexo服务，在浏览器输入 localhost:4000 就可以看到自己生成的博客页面了</p><p>大概长这样</p><p><img src="/2019/08/04/Blog-Building-Process-1/1.jpg" alt="hexo初始博客图"></p><p>然后通过ctrl+c可以把服务关掉</p><h3 id="4-Github创建个人仓库"><a href="#4-Github创建个人仓库" class="headerlink" title="4. Github创建个人仓库"></a>4. Github创建个人仓库</h3><p>在<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>里面，我们需要创建个人仓库（如果没有GitHub账号，需要先注册一个）</p><p><img src="/2019/08/04/Blog-Building-Process-1/2.png" alt="GitHub新建仓库"></p><p>然后命名为 xxxx.github.io，其中xxxx为你自己的用户名，只有这样，将来部署到GitHub时候，才能被识别，如图，我的用户名为hhzzjj，所以命名为hhzzjj.github.io</p><p><img src="/2019/08/04/Blog-Building-Process-1/3.png" alt="GitHub仓库命名"></p><p>然后点击 create repository，这样，我们的博客仓库就建好了。</p><h3 id="5-生成-SSH-添加到-GitHub"><a href="#5-生成-SSH-添加到-GitHub" class="headerlink" title="5.生成 SSH 添加到 GitHub"></a>5.生成 SSH 添加到 GitHub</h3><p>回到 git bash中，执行下述命令</p><pre><code class="bash">$ git config --global user.name &quot;yourname&quot;    //这里输入你GitHub的用户名$ git config --global user.email &quot;youremail&quot;  //这里输入你GitHub的邮箱</code></pre><p>然后可以用下述命令检查是否输对</p><pre><code class="bash">$ git config user.name$ git config user.email</code></pre><p>然后创建SSH，一直回车就可以了</p><pre><code class="bash">$ ssh-keygen -t rsa -C &quot;youremail&quot;</code></pre><p>接着去自己电脑 C 盘的用户文件夹中找到自己登陆的用户名（我登录的用户名为he083），进入对应文件夹后，找到 .ssh文件夹。打开后如图所示</p><p><img src="/2019/08/04/Blog-Building-Process-1/4.png" alt=".ssh文件夹内容"></p><p>其中，id_rsa是你电脑的私人秘钥，不能给别人看的。而 id_rsa.pub 是公共秘钥，可以给别人看。</p><p>现在我们用文本文件打开公钥 id_rsa.pub ，然后复制其中的内容，到 GitHub的 setting中，找到 SSH and GPG keys选项，点击 New SSH key按钮，将刚才复制的内容粘贴进去即可（Title随便填写）。</p><p><img src="/2019/08/04/Blog-Building-Process-1/5.png" alt="公钥粘贴"></p><p>我们把公钥粘贴到 GitHub上的意义在于，当你再用本电脑链接 GitHub后，它就会根据公钥匹配你的私钥，当公钥和私钥能够相互匹配时，才能够顺利的通过git上传你的文件到 GitHub上。</p><p>在 gitbash中，输入下面指令查看是否成功</p><pre><code class="bash">$ ssh -T git@github.com</code></pre><p>当时我完成到这一步的时候，没有成功，报错 “ssh: connect to host github.com port 22: Connection timed out”</p><p>这个时候请返回到 .ssh文件夹中，找到config文件，如果没有就创建一个（没有后缀，就是 config文件，可以先创建为文本文件，然后删掉 .txt），然后用记事本打开 config文件，在其中原封不动地粘贴如下代码即可：</p><pre><code>Host github.comUser gitHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaPort 443</code></pre><p>保存并退出后，再次输入下面指令</p><pre><code class="bash">$ ssh -T git@github.com</code></pre><p>提示连接成功！</p><p><img src="/2019/08/04/Blog-Building-Process-1/6.png" alt="提示连接成功"></p><h3 id="6-将-Hexo-部署到-GitHub"><a href="#6-将-Hexo-部署到-GitHub" class="headerlink" title="6. 将 Hexo 部署到 GitHub"></a>6. 将 Hexo 部署到 GitHub</h3><p>我们已经能够连接到 GitHub了，下一步，我们就要将我们在本地创建的东西给部署到 GitHub上去。</p><p>我们打开 myblog文件下面的配置文件 <code>_config.yml</code>，翻到最后，将 YourgithubName替换为自己的GitHub账户</p><pre><code>deploy:  type: git  repo: https://github.com/YourgithubName/YourgithubName.github.io.git    //注释：将两个 YourgithubName替换为自己的GitHub名字  branch: master</code></pre><p>然后安装 deploy-git ，也就是部署的命令，这样你才能用命令部署到 GitHub。</p><pre><code class="bash">$ npm install hexo-deployer-git --save</code></pre><p>接着执行</p><pre><code>$ hexo clean      //清除缓存文件 db.json 和已生成的静态文件 public（也可以不加）$ hexo generate   //生成网站静态文件到默认设置的 public 文件夹（也常用缩写 hexo g）$ hexo deploy     //自动生成网站静态文件，并部署到设定的仓库（也常用缩写 hexo d）</code></pre><p><strong>注：</strong> deploy时可能要你输入 username 和 password</p><p>得到下图则说明部署成功了！</p><p><img src="/2019/08/04/Blog-Building-Process-1/7.png" alt="部署成功"></p><p>稍等一会儿访问 <code>http://yourname.github.io</code> 你就能看到你自己的博客了！</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/2019/08/03/AboutMe/"/>
      <url>/2019/08/03/AboutMe/</url>
      
        <content type="html"><![CDATA[<p>97年冬月。出生于四川宜宾。</p><p>北京邮电大学通信工程本科在读，目前实习于AWS产品市场部门。</p><p>对大多数新兴技术抱有浓厚兴趣，却常因个人的懒惰而无法坚持下去，绝大多数的领域都只知其皮毛。</p><a id="more"></a><p>客观评价自己，玩心很重+三分钟热情。</p><p>喜欢动漫、游戏、音乐。更多时候，我认为人生于这个世界，就是应该去享受生活的，而非被生活所压迫。</p><p>但打算踏入互联网领域，选择将来成为一名程序员的自己，其实也是只能负载前行罢了。</p><p>这就是我，一个平凡的我。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/08/02/hello-world/"/>
      <url>/2019/08/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post.</p><a id="more"></a><p>Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo,<br>you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[三次握手，四次挥手]]></title>
    <url>%2F2019%2F08%2F18%2FUsing-Wireshark%2F</url>
    <content type="text"><![CDATA[我的课设有一个基础实验，要求用 Wireshark 来抓包分析 TCP 的三次握手和四次挥手过程，于是将过程整理如下 注：本文在 Linux 环境下实现 一. 前言什么是 Wireshark？Wireshark（前称Ethereal）是一个网络封包分析软件。网络封包分析软件的功能是撷取网络封包，并尽可能显示出最为详细的网络封包资料。 在过去，网络封包分析软件是非常昂贵的，或是专门属于盈利用的软件。Ethereal的出现改变了这一切。在GNUGPL通用许可证的保障范围底下，使用者可以以免费的代价取得软件与其源代码，并拥有针对其源代码修改及客制化的权利。Ethereal是目前全世界最广泛的网络封包分析软件之一。 使用 Wireshark 可以让我们看到端口数据变化（tcp/http等都可以），如接收、发送甚至是我们每个操作命令如何传递，都可以通过 Wireshark 来截取数据查看，它会把数据信息原样的展示给你。 什么是 TCP 三次握手？所谓三次握手，是指建立一个 TCP 连接时，为了防止已失效的连接请求报文段突然又传送到了服务端，因而需要客户端和服务器端总共发送三个包以确认连接的建立。 因为信道不可靠，但是通信双发需要就某个问题达成一致，而要解决这个问题, 无论你在消息中包含什么信息, 三次通信是理论上的最小值。所以三次握手不是TCP本身的要求，而是为了满足“在不可靠信道上可靠地传输信息”这一需求所导致的。 什么是 TCP 四次挥手？TCP连接的释放，就是俗称的四次挥手，它和三次握手是正反面的应用，一个拿来开始，一个则是结束。那四次挥手又是为何呢？ TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。当主机A第一次挥手，发出中断请求时，仅仅表明 主机A已经没有数据要发送了，它仅仅会断开一条数据通路（注意：TCP是双工的）。主机B接收到请求，并二次挥手告诉主机A它收到了中断请求信息。但是主机B 还会继续发送 剩余的数据。待它的数据已经全部发送完毕后，它会第三次挥手，告诉主机A数据已经发送完毕，可以断开 TCP 连接。主机A收到后，第四次挥手，对主机B发出确认。再然后，才会彼此中断这次TCP连接。 二. 利用 Wireshark 进行抓包1. 安装 Wireshark首先如果你的主机没有安装 Wireshark，可以使用以下命令安装 $ sudo apt-get install wireshark 如果过程中出现 选择 &lt; YES &gt;，之后就安装完成了 2. 查询本机 IP 地址输入命令查询本机 IP 地址 $ ifconfig 如下图，其中，30.0.0.42 即是我当前使用的计算机的 IP 地址 3. 启动 Wireshark执行命令来启动 Wireshark $ sudo wireshark 很不幸地是出现了如下报错 点击 OK 后虽然还是进去了，但是不确定后面抓取数据包会不会出现异常。 所以，本着出现问题就去解决的态度，我在网上查找相关的报错解决方案。庆幸的是，该报错很多人都遇到过，所以提供了可靠的解决方案，如下 $ vim /usr/share/wireshark/init.lua 将倒数第2行的如图部分 修改为 --dofile(DATA_DIR..&quot;console.lua&quot;)然后再启动 Wireshark，就没有刚才的报错了！ 4. 抓包准备首先，进入 Wireshark 后，界面大概是这样的 先点击左上方，上图所示的按钮，然后选中 eth0 打钩（当你的主机有多块网卡时，你需要选择一个网卡），这也就意味着，我们之后会用 Wireshark 捕获 eth0 的网络包 可以看到，eth0 对应的IP地址，就是我们之前查询的 30.0.0.42 过滤规则的填写是非常重要的，因为使用wireshark时，将会得到大量的冗余信息，我们需要成千上万条记录中，找到自己需要抓取的数据包。而过滤规则却可以帮我们滤掉那些我们不关心的数据包，找到我们需要的信息。 我们在Filter里面填写过滤规则，百度的其中一个IP为 180.101.49.12 (ip.src == 30.0.0.42 and ip.dst == 180.101.49.12) or (ip.src == 180.101.49.12 and ip.dst == 30.0.0.42)然后点击 apply，这样，过滤器就启动了 然后我们就可以准备抓包了！ 5. TCP 三次握手然后点击左上方的鲨鱼鳍图标，开始抓取数据 随后，我们打开浏览器，在浏览器里面输入 180.101.49.12，回车 再返回到 Wireshark，我们就看到了如图所示的一堆数据包 其中，红框中的3条，就是tcp的三次握手 对比下图进行分析 第一次握手 ( No.58 )：本机发送连接请求报文段给百度，内容中包括 SYN=1，seq=0 第二次握手 ( No.59 )：百度收到数据报，确认连接并发回报文，内容中包括 SYN=1，ACK=1，seq=0，ack=1 第三次握手 ( No.60 )：本机收到百度返回的数据报后，再向百度发送确认，内容中包括 ACK=1，seq=1，ack=1 这样，三次握手后，TCP 连接成功建立，通信双方的进程之间就建立了一条传输连接，随后可以在该连接上传输数据了 5. TCP 四次挥手一旦数据传输结束，参与传输的任何一方都可以请求释放传输连接，之后会通过“四次挥手”来释放连接。 抓获相关断开请求的数据包，如下图 而我们过去在教材上所学的标准的 TCP 四次挥手应该是如下图： 第一次挥手 ( No.366 )：本机发送中断请求给百度，内容中包括 FIN=1，ACK=1，seq=354，并等待百度确认 第二次挥手 ( No.381 )：百度收到请求，发出确认，内容中包括 ACK=1，seq=40092，ack=355。此后百度会继续传输没有传送完成的数据 第三次挥手 ( No.382 )：百度已经没有要向本机传送的数据了，于是发送数据包至本机，通知 TCP 释放连接，内容中包括 FIN=1，ACK=1，seq=40092，ack=355 第四次挥手 ( No.383 )：本机收到连接释放报文段后，发出确认，在确认报文段中，ACK=1，seq=355，ack=40093 再然后，双方就会彼此愉快地中断这次TCP连接了！]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>TCP</tag>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建个人博客教程（一）]]></title>
    <url>%2F2019%2F08%2F04%2FBlog-Building-Process-1%2F</url>
    <content type="text"><![CDATA[花了两天的时间，本萌新的个人博客终于搭建好了，用 Hexo + GitHub 搭建个人博客真的超方便！ 由于自己本身是学生，购买服务器并且定期维护，成本较高并且比较麻烦，所以选择到github上面托管个人博客。 博客的搭建过程参考了 hexo超完整的搭建教程，让你拥有一个专属个人博客，这一篇引导写的真的特别详细，强烈推荐！ 我的这篇文章会在其基础之上，以自己亲自操作的流程为主，记录搭建个人博客的过程。 注： 本文为在WIN10环境下进行的操作 博客的基础搭建过程1. 安装 Git我们需要通过git来管理和上传我们的博客文章到github，所以，首先我们需要到git官网上下载,之后会有一个Git Bash的工具，打开Git Bash后，我们就可以得到命令行窗口（这个比WIN自带的好用太多了） 2. 安装 nodejs因为Hexo是基于nodejs所编写，所以我们需要下载安装nodejs和npm工具（选择LTS版本即可） 安装完毕后，我们在Git Bash的命令行窗口输入命令 $ node -v $ npm -v 检查是否安装成功，安装成功会显示对应地版本号 3. 安装 hexo可以先创建一个单独的文件夹 blog，然后 cd 到该文件夹去，由于我创建的路径为 d:\blog，所以直接在命令行输入进入该文件夹的命令 $ cd d:/blog 然后输入命令安装 hexo $ npm install -g hexo-cli 再用 $ hexo -v 查看版本，检查一下是否安装成功 然后再初始化一下 hexo（这个myblog自己取什么名字都行，以后的相对应的文件都会放在 myblog下，操作也会在该文件夹下进行） $ hexo init myblog 接着 $ cd myblog //进入这个myblog文件夹 $ npm install 这样，指定文件夹目录下面就会多出： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题 _config.yml: 博客的配置文件 $ hexo g $ hexo server 这样我们就打开了hexo服务，在浏览器输入 localhost:4000 就可以看到自己生成的博客页面了 大概长这样 然后通过ctrl+c可以把服务关掉 4. Github创建个人仓库在GitHub里面，我们需要创建个人仓库（如果没有GitHub账号，需要先注册一个） 然后命名为 xxxx.github.io，其中xxxx为你自己的用户名，只有这样，将来部署到GitHub时候，才能被识别，如图，我的用户名为hhzzjj，所以命名为hhzzjj.github.io 然后点击 create repository，这样，我们的博客仓库就建好了。 5.生成 SSH 添加到 GitHub回到 git bash中，执行下述命令 $ git config --global user.name &quot;yourname&quot; #这里输入你GitHub的用户名 $ git config --global user.email &quot;youremail&quot; #这里输入你GitHub的邮箱 然后可以用下述命令检查是否输对 $ git config user.name $ git config user.email 然后创建SSH，一直回车就可以了 $ ssh-keygen -t rsa -C &quot;youremail&quot; 接着去自己电脑 C 盘的用户文件夹中找到自己登陆的用户名（我登录的用户名为he083），进入对应文件夹后，找到 .ssh文件夹。打开后如图所示 其中，id_rsa是你电脑的私人秘钥，不能给别人看的。而 id_rsa.pub 是公共秘钥，可以给别人看。 现在我们用文本文件打开公钥 id_rsa.pub ，然后复制其中的内容，到 GitHub的 setting中，找到 SSH and GPG keys选项，点击 New SSH key按钮，将刚才复制的内容粘贴进去即可（Title随便填写）。 我们把公钥粘贴到 GitHub上的意义在于，当你再用本电脑链接 GitHub后，它就会根据公钥匹配你的私钥，当公钥和私钥能够相互匹配时，才能够顺利的通过git上传你的文件到 GitHub上。 在 gitbash中，输入下面指令查看是否成功 $ ssh -T git@github.com 当时我完成到这一步的时候，没有成功，报错 “ssh: connect to host github.com port 22: Connection timed out” 这个时候请返回到 .ssh文件夹中，找到config文件，如果没有就创建一个（没有后缀，就是 config文件，可以先创建为文本文件，然后删掉 .txt），然后用记事本打开 config文件，在其中原封不动地粘贴如下代码即可： Host github.com User git Hostname ssh.github.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa Port 443保存并退出后，再次输入下面指令 $ ssh -T git@github.com 提示连接成功！ 6. 将 Hexo 部署到 GitHub我们已经能够连接到 GitHub了，下一步，我们就要将我们在本地创建的东西给部署到 GitHub上去。 我们打开 myblog文件下面的配置文件 _config.yml，翻到最后，将 YourgithubName替换为自己的GitHub账户 deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master然后安装 deploy-git ，也就是部署的命令，这样你才能用命令部署到 GitHub。 $ npm install hexo-deployer-git --save 接着执行 $ hexo clean #清除缓存文件 db.json 和已生成的静态文件 public（也可以不加） $ hexo generate #生成网站静态文件到默认设置的 public 文件夹（也常用缩写 hexo g） $ hexo deploy #自动生成网站静态文件，并部署到设定的仓库（也常用缩写 hexo d） 注： deploy时可能要你输入 username 和 password 得到下图则说明部署成功了！ 稍等一会儿访问 http://yourname.github.io 你就能看到你自己的博客了！]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于我]]></title>
    <url>%2F2019%2F08%2F03%2FAboutMe%2F</url>
    <content type="text"><![CDATA[97年冬月。出生于四川宜宾。 北京邮电大学通信工程本科在读，目前实习于AWS产品市场部门。 对大多数新兴技术抱有浓厚兴趣，却常因个人的懒惰而无法坚持下去，绝大多数的领域都只知其皮毛。 客观评价自己，玩心很重+三分钟热情。 喜欢动漫、游戏、音乐。更多时候，我认为人生于这个世界，就是应该去享受生活的，而非被生活所压迫。 但打算踏入互联网领域，选择将来成为一名程序员的自己，其实也是只能负载前行罢了。 这就是我，一个平凡的我。]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
</search>
